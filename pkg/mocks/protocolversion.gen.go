// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-go/pkg/api/protocol"
)

type ProtocolVersion struct {
	DocumentTransformerStub        func() protocol.DocumentTransformer
	documentTransformerMutex       sync.RWMutex
	documentTransformerArgsForCall []struct {
	}
	documentTransformerReturns struct {
		result1 protocol.DocumentTransformer
	}
	documentTransformerReturnsOnCall map[int]struct {
		result1 protocol.DocumentTransformer
	}
	DocumentValidatorStub        func() protocol.DocumentValidator
	documentValidatorMutex       sync.RWMutex
	documentValidatorArgsForCall []struct {
	}
	documentValidatorReturns struct {
		result1 protocol.DocumentValidator
	}
	documentValidatorReturnsOnCall map[int]struct {
		result1 protocol.DocumentValidator
	}
	OperationApplierStub        func() protocol.OperationApplier
	operationApplierMutex       sync.RWMutex
	operationApplierArgsForCall []struct {
	}
	operationApplierReturns struct {
		result1 protocol.OperationApplier
	}
	operationApplierReturnsOnCall map[int]struct {
		result1 protocol.OperationApplier
	}
	OperationParserStub        func() protocol.OperationParser
	operationParserMutex       sync.RWMutex
	operationParserArgsForCall []struct {
	}
	operationParserReturns struct {
		result1 protocol.OperationParser
	}
	operationParserReturnsOnCall map[int]struct {
		result1 protocol.OperationParser
	}
	ProtocolStub        func() protocol.Protocol
	protocolMutex       sync.RWMutex
	protocolArgsForCall []struct {
	}
	protocolReturns struct {
		result1 protocol.Protocol
	}
	protocolReturnsOnCall map[int]struct {
		result1 protocol.Protocol
	}
	VersionStub        func() string
	versionMutex       sync.RWMutex
	versionArgsForCall []struct {
	}
	versionReturns struct {
		result1 string
	}
	versionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProtocolVersion) DocumentTransformer() protocol.DocumentTransformer {
	fake.documentTransformerMutex.Lock()
	ret, specificReturn := fake.documentTransformerReturnsOnCall[len(fake.documentTransformerArgsForCall)]
	fake.documentTransformerArgsForCall = append(fake.documentTransformerArgsForCall, struct {
	}{})
	stub := fake.DocumentTransformerStub
	fakeReturns := fake.documentTransformerReturns
	fake.recordInvocation("DocumentTransformer", []interface{}{})
	fake.documentTransformerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) DocumentTransformerCallCount() int {
	fake.documentTransformerMutex.RLock()
	defer fake.documentTransformerMutex.RUnlock()
	return len(fake.documentTransformerArgsForCall)
}

func (fake *ProtocolVersion) DocumentTransformerCalls(stub func() protocol.DocumentTransformer) {
	fake.documentTransformerMutex.Lock()
	defer fake.documentTransformerMutex.Unlock()
	fake.DocumentTransformerStub = stub
}

func (fake *ProtocolVersion) DocumentTransformerReturns(result1 protocol.DocumentTransformer) {
	fake.documentTransformerMutex.Lock()
	defer fake.documentTransformerMutex.Unlock()
	fake.DocumentTransformerStub = nil
	fake.documentTransformerReturns = struct {
		result1 protocol.DocumentTransformer
	}{result1}
}

func (fake *ProtocolVersion) DocumentTransformerReturnsOnCall(i int, result1 protocol.DocumentTransformer) {
	fake.documentTransformerMutex.Lock()
	defer fake.documentTransformerMutex.Unlock()
	fake.DocumentTransformerStub = nil
	if fake.documentTransformerReturnsOnCall == nil {
		fake.documentTransformerReturnsOnCall = make(map[int]struct {
			result1 protocol.DocumentTransformer
		})
	}
	fake.documentTransformerReturnsOnCall[i] = struct {
		result1 protocol.DocumentTransformer
	}{result1}
}

func (fake *ProtocolVersion) DocumentValidator() protocol.DocumentValidator {
	fake.documentValidatorMutex.Lock()
	ret, specificReturn := fake.documentValidatorReturnsOnCall[len(fake.documentValidatorArgsForCall)]
	fake.documentValidatorArgsForCall = append(fake.documentValidatorArgsForCall, struct {
	}{})
	stub := fake.DocumentValidatorStub
	fakeReturns := fake.documentValidatorReturns
	fake.recordInvocation("DocumentValidator", []interface{}{})
	fake.documentValidatorMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) DocumentValidatorCallCount() int {
	fake.documentValidatorMutex.RLock()
	defer fake.documentValidatorMutex.RUnlock()
	return len(fake.documentValidatorArgsForCall)
}

func (fake *ProtocolVersion) DocumentValidatorCalls(stub func() protocol.DocumentValidator) {
	fake.documentValidatorMutex.Lock()
	defer fake.documentValidatorMutex.Unlock()
	fake.DocumentValidatorStub = stub
}

func (fake *ProtocolVersion) DocumentValidatorReturns(result1 protocol.DocumentValidator) {
	fake.documentValidatorMutex.Lock()
	defer fake.documentValidatorMutex.Unlock()
	fake.DocumentValidatorStub = nil
	fake.documentValidatorReturns = struct {
		result1 protocol.DocumentValidator
	}{result1}
}

func (fake *ProtocolVersion) DocumentValidatorReturnsOnCall(i int, result1 protocol.DocumentValidator) {
	fake.documentValidatorMutex.Lock()
	defer fake.documentValidatorMutex.Unlock()
	fake.DocumentValidatorStub = nil
	if fake.documentValidatorReturnsOnCall == nil {
		fake.documentValidatorReturnsOnCall = make(map[int]struct {
			result1 protocol.DocumentValidator
		})
	}
	fake.documentValidatorReturnsOnCall[i] = struct {
		result1 protocol.DocumentValidator
	}{result1}
}

func (fake *ProtocolVersion) OperationApplier() protocol.OperationApplier {
	fake.operationApplierMutex.Lock()
	ret, specificReturn := fake.operationApplierReturnsOnCall[len(fake.operationApplierArgsForCall)]
	fake.operationApplierArgsForCall = append(fake.operationApplierArgsForCall, struct {
	}{})
	stub := fake.OperationApplierStub
	fakeReturns := fake.operationApplierReturns
	fake.recordInvocation("OperationApplier", []interface{}{})
	fake.operationApplierMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) OperationApplierCallCount() int {
	fake.operationApplierMutex.RLock()
	defer fake.operationApplierMutex.RUnlock()
	return len(fake.operationApplierArgsForCall)
}

func (fake *ProtocolVersion) OperationApplierCalls(stub func() protocol.OperationApplier) {
	fake.operationApplierMutex.Lock()
	defer fake.operationApplierMutex.Unlock()
	fake.OperationApplierStub = stub
}

func (fake *ProtocolVersion) OperationApplierReturns(result1 protocol.OperationApplier) {
	fake.operationApplierMutex.Lock()
	defer fake.operationApplierMutex.Unlock()
	fake.OperationApplierStub = nil
	fake.operationApplierReturns = struct {
		result1 protocol.OperationApplier
	}{result1}
}

func (fake *ProtocolVersion) OperationApplierReturnsOnCall(i int, result1 protocol.OperationApplier) {
	fake.operationApplierMutex.Lock()
	defer fake.operationApplierMutex.Unlock()
	fake.OperationApplierStub = nil
	if fake.operationApplierReturnsOnCall == nil {
		fake.operationApplierReturnsOnCall = make(map[int]struct {
			result1 protocol.OperationApplier
		})
	}
	fake.operationApplierReturnsOnCall[i] = struct {
		result1 protocol.OperationApplier
	}{result1}
}

func (fake *ProtocolVersion) OperationParser() protocol.OperationParser {
	fake.operationParserMutex.Lock()
	ret, specificReturn := fake.operationParserReturnsOnCall[len(fake.operationParserArgsForCall)]
	fake.operationParserArgsForCall = append(fake.operationParserArgsForCall, struct {
	}{})
	stub := fake.OperationParserStub
	fakeReturns := fake.operationParserReturns
	fake.recordInvocation("OperationParser", []interface{}{})
	fake.operationParserMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) OperationParserCallCount() int {
	fake.operationParserMutex.RLock()
	defer fake.operationParserMutex.RUnlock()
	return len(fake.operationParserArgsForCall)
}

func (fake *ProtocolVersion) OperationParserCalls(stub func() protocol.OperationParser) {
	fake.operationParserMutex.Lock()
	defer fake.operationParserMutex.Unlock()
	fake.OperationParserStub = stub
}

func (fake *ProtocolVersion) OperationParserReturns(result1 protocol.OperationParser) {
	fake.operationParserMutex.Lock()
	defer fake.operationParserMutex.Unlock()
	fake.OperationParserStub = nil
	fake.operationParserReturns = struct {
		result1 protocol.OperationParser
	}{result1}
}

func (fake *ProtocolVersion) OperationParserReturnsOnCall(i int, result1 protocol.OperationParser) {
	fake.operationParserMutex.Lock()
	defer fake.operationParserMutex.Unlock()
	fake.OperationParserStub = nil
	if fake.operationParserReturnsOnCall == nil {
		fake.operationParserReturnsOnCall = make(map[int]struct {
			result1 protocol.OperationParser
		})
	}
	fake.operationParserReturnsOnCall[i] = struct {
		result1 protocol.OperationParser
	}{result1}
}

func (fake *ProtocolVersion) Protocol() protocol.Protocol {
	fake.protocolMutex.Lock()
	ret, specificReturn := fake.protocolReturnsOnCall[len(fake.protocolArgsForCall)]
	fake.protocolArgsForCall = append(fake.protocolArgsForCall, struct {
	}{})
	stub := fake.ProtocolStub
	fakeReturns := fake.protocolReturns
	fake.recordInvocation("Protocol", []interface{}{})
	fake.protocolMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) ProtocolCallCount() int {
	fake.protocolMutex.RLock()
	defer fake.protocolMutex.RUnlock()
	return len(fake.protocolArgsForCall)
}

func (fake *ProtocolVersion) ProtocolCalls(stub func() protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = stub
}

func (fake *ProtocolVersion) ProtocolReturns(result1 protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = nil
	fake.protocolReturns = struct {
		result1 protocol.Protocol
	}{result1}
}

func (fake *ProtocolVersion) ProtocolReturnsOnCall(i int, result1 protocol.Protocol) {
	fake.protocolMutex.Lock()
	defer fake.protocolMutex.Unlock()
	fake.ProtocolStub = nil
	if fake.protocolReturnsOnCall == nil {
		fake.protocolReturnsOnCall = make(map[int]struct {
			result1 protocol.Protocol
		})
	}
	fake.protocolReturnsOnCall[i] = struct {
		result1 protocol.Protocol
	}{result1}
}

func (fake *ProtocolVersion) Version() string {
	fake.versionMutex.Lock()
	ret, specificReturn := fake.versionReturnsOnCall[len(fake.versionArgsForCall)]
	fake.versionArgsForCall = append(fake.versionArgsForCall, struct {
	}{})
	stub := fake.VersionStub
	fakeReturns := fake.versionReturns
	fake.recordInvocation("Version", []interface{}{})
	fake.versionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ProtocolVersion) VersionCallCount() int {
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	return len(fake.versionArgsForCall)
}

func (fake *ProtocolVersion) VersionCalls(stub func() string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = stub
}

func (fake *ProtocolVersion) VersionReturns(result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	fake.versionReturns = struct {
		result1 string
	}{result1}
}

func (fake *ProtocolVersion) VersionReturnsOnCall(i int, result1 string) {
	fake.versionMutex.Lock()
	defer fake.versionMutex.Unlock()
	fake.VersionStub = nil
	if fake.versionReturnsOnCall == nil {
		fake.versionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.versionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ProtocolVersion) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.documentTransformerMutex.RLock()
	defer fake.documentTransformerMutex.RUnlock()
	fake.documentValidatorMutex.RLock()
	defer fake.documentValidatorMutex.RUnlock()
	fake.operationApplierMutex.RLock()
	defer fake.operationApplierMutex.RUnlock()
	fake.operationParserMutex.RLock()
	defer fake.operationParserMutex.RUnlock()
	fake.protocolMutex.RLock()
	defer fake.protocolMutex.RUnlock()
	fake.versionMutex.RLock()
	defer fake.versionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProtocolVersion) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
